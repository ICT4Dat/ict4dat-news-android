ext {
    releaseSignCredLogic = new ReleaseSignCredLogic(project)
}

class ReleaseSignCredLogic {

    public final configSigningFileName = "signing.properties"
    public final configLocalPropFileName = "local.properties"

    public final configKeystorePw = "RELEASE_KEYSTORE_PW"
    public final configKeyAlias = "RELEASE_KEY_ALIAS"
    public final configKeyPw = "RELEASE_KEY_PW"
    public final configKeyStorePath = "RELEASE_KEYSTORE_PATH"

    public final props
    private final project

    ReleaseSignCredLogic(project) {
        this.project = project
        this.props = loadReleaseSigningProperties()
    }

    def loadReleaseSigningProperties() {
        Properties propertiesObj

        project.logger.quiet("$project.rootDir/$configSigningFileName")

        // read signing properties
        if ((propertiesObj = loadFromProperties("$project.rootDir/$configSigningFileName")) != null) {
            project.logger.quiet("signing-config: using signing properties")
            return propertiesObj
        }

        // read local props
        if ((propertiesObj = loadFromProperties("$project.rootDir/$configLocalPropFileName")) != null) {
            project.logger.quiet("signing-config: using local properties")
            return propertiesObj
        }

        project.logger.quiet("signing-config: no signing config found")
        return new Properties()
    }

    def loadFromProperties(fileName) {
        Properties props = new Properties()
        File propfile = new File(fileName)

        if (propfile.exists()) {
            props.load(new FileInputStream(propfile))
            if (props.containsKey(configKeyStorePath) && props.containsKey(configKeystorePw)
                    && props.containsKey(configKeyAlias) && props.containsKey(configKeyPw)
                    && new File((String) props.get(configKeyStorePath)).exists()) {
                project.logger.quiet("signing-config: use $fileName for singing config")
                return props
            }
        } else {
            project.logger.quiet("signing-config: $propfile does not exist for singing config")
        }
        return null
    }
}
